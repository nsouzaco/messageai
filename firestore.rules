rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to get conversation participants
    function getConversationParticipants(conversationId) {
      return get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
    }
    
    // Helper function to check if user is in conversation
    function isInConversation(conversationId) {
      return isSignedIn() && request.auth.uid in getConversationParticipants(conversationId);
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn() && isOwner(userId);
    }
    
    // Conversations collection
    match /conversations/{conversationId} {
      allow read: if isSignedIn() && request.auth.uid in resource.data.participants;
      allow create: if isSignedIn() && request.auth.uid in request.resource.data.participants;
      allow update: if isSignedIn() && request.auth.uid in resource.data.participants;
      
      // Messages subcollection
      match /messages/{messageId} {
        allow read: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        allow create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        allow update: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      }
    }
    
    // Typing status collection
    match /typing_status/{statusId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn() && isOwner(request.resource.data.userId);
    }
    
    // ===== AI COLLECTIONS =====
    
    // Thread Summaries - Read-only for users, written by Cloud Functions
    match /threadSummaries/{summaryId} {
      allow read: if isSignedIn();
      allow write: if false; // Only Cloud Functions can write
    }
    
    // Action Items - Users can read and mark complete
    match /actionItems/{itemId} {
      allow read: if isSignedIn();
      // Users can only update the 'completed' field
      allow update: if isSignedIn() && 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['completed']);
      allow create, delete: if false; // Only Cloud Functions can create/delete
    }
    
    // Decisions - Read-only for users
    match /decisions/{decisionId} {
      allow read: if isSignedIn();
      allow write: if false; // Only Cloud Functions can write
    }
    
    // Message Priorities - Read-only for users
    match /messagePriorities/{messageId} {
      allow read: if isSignedIn();
      allow write: if false; // Only Cloud Functions can write
    }
    
    // Scheduling Suggestions - Read-only for users
    match /schedulingSuggestions/{suggestionId} {
      allow read: if isSignedIn();
      allow write: if false; // Only Cloud Functions can write
    }
    
    // AI Cache - Internal only, no user access
    match /aiCache/{cacheId} {
      allow read, write: if false; // Only Cloud Functions
    }
    
    // Rate Limits - Internal only, no user access
    match /rateLimits/{limitId} {
      allow read, write: if false; // Only Cloud Functions
    }
    
    // Default: deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

